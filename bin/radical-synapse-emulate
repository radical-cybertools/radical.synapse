#!/usr/bin/env python

import os
import sys
import pprint
import radical.synapse

# FIXME: support tags as flags

# ------------------------------------------------------------------------------
#
def run_command (command):
    
    info, ret, out = radical.synapse.emulate (command=command)
    pprint.pprint (info)


# ------------------------------------------------------------------------------
#
def run_samples (cpu_flops, sto_in, sto_out, mem_rss, n_samples):
    
    samples  = list()

    for n in range(n_samples):

        # assume 1 sample per second -- but that is not interpreted anyway...
        time = n+1 

        # append CPU sample (set efficiency to 1)
        samples.append(['cpu', float(time), [cpu_flops, 1]])

        # append STO sample
        samples.append(['sto', float(time), [sto_in, sto_out]])

        # append MEM sample
        samples.append(['mem', float(time), [mem_rss]])

    info, ret, out = radical.synapse.emulate (samples=samples)
    pprint.pprint (info)


# ------------------------------------------------------------------------------
#
def usage (msg=None, noexit=False) :

    if  msg :
        print "\n      Error: %s" % msg

    parser.add_option('-m', '--mode',      dest='mode')
    parser.add_option('-f', '--flops',     dest='cpu_flops')
    parser.add_option('-i', '--input',     dest='sto_in')
    parser.add_option('-o', '--output',    dest='sto_out')
    parser.add_option('-r', '--memory',    dest='mem_rss')
    parser.add_option('-s', '--samples',   dest='samples')
    parser.add_option('-h', '--help',      dest='help', action="store_true")
    print """
      usage     : %s -m <mode> [-f <flops>]  [-i <input>]   [-o <output>] 
                               [-r <memory>] [-s <samples>] [command] 

      examples  : %s sleep 10
                  %s -m command sleep 10
                  %s -m sample -f 10000000

      mode(s)   :

        help    : show this message
        command : run the specified command
        sample  : run the specified load as emulation samples


      arguments :
        
        -f      : number of flops to emulate
        -i      : number of bytes to read from disk
        -o      : number of bytes to write to disk
        -r      : number of bytes to allocate (RSS)
        -s      : number of samples to run with the above configuration


      Notes     :

        The default mode is 'command'.

""" % (sys.argv[0], sys.argv[0], sys.argv[0], sys.argv[0])

    if  msg :
        sys.exit (1)

    if  not noexit :
        sys.exit (0)


# ------------------------------------------------------------------------------
#
if __name__ == '__main__' :

    import optparse
    parser = optparse.OptionParser (add_help_option=False)

    parser.add_option('-m', '--mode',      dest='mode')
    parser.add_option('-f', '--flops',     dest='cpu_flops')
    parser.add_option('-i', '--input',     dest='sto_in')
    parser.add_option('-o', '--output',    dest='sto_out')
    parser.add_option('-r', '--memory',    dest='mem_rss')
    parser.add_option('-s', '--samples',   dest='samples')
    parser.add_option('-h', '--help',      dest='help', action="store_true")

    options, args = parser.parse_args ()

    mode      = options.mode 
    command   = ' '.join(args)
    cpu_flops = options.cpu_flops
    sto_in    = options.sto_in   
    sto_out   = options.sto_out
    mem_rss   = options.mem_rss
    samples   = options.samples

    if not cpu_flops : cpu_flops = 0.0
    if not sto_in    : sto_in    = 0.0
    if not sto_out   : sto_out   = 0.0
    if not mem_rss   : mem_rss   = 0.0
    if not samples   : samples   = 1

    cpu_flops = float(cpu_flops)
    sto_in    = float(sto_in   )
    sto_out   = float(sto_out  )
    mem_rss   = float(mem_rss  )
    samples   = int  (samples  )

    if  options.help :
        usage ()

    if  mode in ['help'] : 
        usage ()

    if  not options.mode :
        mode = 'command'

    if mode == 'command' :
        if  cpu_flops or \
            sto_in    or \
            sto_out   or \
            mem_rss   or \
            samples      :
            usage ("mode 'command' is incompatible with sampling spcifications")

        if not command:
            usage ("mode 'command' requires command arg")


    if  'RADICAL_SYNAPSE_DBURL' in os.environ : 
        default_dburl = os.environ['RADICAL_SYNAPSE_DBURL']
    else :
        default_dburl = _DEFAULT_DBURL 

    if not cpu_flops : cpu_flops  = 0.0
    if not sto_in    : sto_in     = 0.0
    if not sto_out   : sto_out    = 0.0
    if not mem_rss   : mem_rss    = 0.0
    if not samples   : samples    = 0.0

    if   mode == 'command' : run_command (command)
    elif mode == 'sample'  : run_samples (cpu_flops, sto_in, sto_out, mem_rss, samples)
    elif mode == 'help'    : usage (noexit=True)
    else                   : usage ("unknown mode '%s'" % mode)

# ------------------------------------------------------------------------------

